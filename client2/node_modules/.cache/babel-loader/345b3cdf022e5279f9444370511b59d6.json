{"ast":null,"code":"// src/onlineManager.ts\nimport { Subscribable } from \"./subscribable.js\";\nimport { isServer } from \"./utils.js\";\nvar OnlineManager = class extends Subscribable {\n  #online = true;\n  #cleanup;\n  #setup;\n\n  constructor() {\n    super();\n\n    this.#setup = onOnline => {\n      if (!isServer && window.addEventListener) {\n        const onlineListener = () => onOnline(true);\n\n        const offlineListener = () => onOnline(false);\n\n        window.addEventListener(\"online\", onlineListener, false);\n        window.addEventListener(\"offline\", offlineListener, false);\n        return () => {\n          window.removeEventListener(\"online\", onlineListener);\n          window.removeEventListener(\"offline\", offlineListener);\n        };\n      }\n\n      return;\n    };\n  }\n\n  onSubscribe() {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup);\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.();\n      this.#cleanup = void 0;\n    }\n  }\n\n  setEventListener(setup) {\n    this.#setup = setup;\n    this.#cleanup?.();\n    this.#cleanup = setup(this.setOnline.bind(this));\n  }\n\n  setOnline(online) {\n    const changed = this.#online !== online;\n\n    if (changed) {\n      this.#online = online;\n      this.listeners.forEach(listener => {\n        listener(online);\n      });\n    }\n  }\n\n  isOnline() {\n    return this.#online;\n  }\n\n};\nvar onlineManager = new OnlineManager();\nexport { OnlineManager, onlineManager };","map":{"version":3,"mappings":";AAAA,SAASA,YAAT,QAA6B,mBAA7B;AACA,SAASC,QAAT,QAAyB,YAAzB;AAKO,IAAMC,gBAAN,cAA4BF,YAA5B,CAAmD;AACxD,YAAU,IAAV;AACA;AAEA;;AAEAG,gBAAc;AACZ;;AACA,SAAK,MAAL,GAAeC,QAAD,IAAc;AAG1B,UAAI,CAACH,QAAD,IAAaI,OAAOC,gBAAxB,EAA0C;AACxC,cAAMC,iBAAiB,MAAMH,SAAS,IAAT,CAA7B;;AACA,cAAMI,kBAAkB,MAAMJ,SAAS,KAAT,CAA9B;;AAEAC,eAAOC,gBAAP,CAAwB,QAAxB,EAAkCC,cAAlC,EAAkD,KAAlD;AACAF,eAAOC,gBAAP,CAAwB,SAAxB,EAAmCE,eAAnC,EAAoD,KAApD;AAEA,eAAO,MAAM;AAEXH,iBAAOI,mBAAP,CAA2B,QAA3B,EAAqCF,cAArC;AACAF,iBAAOI,mBAAP,CAA2B,SAA3B,EAAsCD,eAAtC;AACF,SAJA;AAKF;;AAEA;AACF,KAlBA;AAmBF;;AAEUE,gBAAoB;AAC5B,QAAI,CAAC,KAAK,QAAV,EAAoB;AAClB,WAAKC,gBAAL,CAAsB,KAAK,MAA3B;AACF;AACF;;AAEUC,kBAAgB;AACxB,QAAI,CAAC,KAAKC,YAAL,EAAL,EAA0B;AACxB,WAAK,QAAL;AACA,WAAK,QAAL,GAAgB,MAAhB;AACF;AACF;;AAEAF,mBAAiBG,KAAjB,EAAuC;AACrC,SAAK,MAAL,GAAcA,KAAd;AACA,SAAK,QAAL;AACA,SAAK,QAAL,GAAgBA,MAAM,KAAKC,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAN,CAAhB;AACF;;AAEAD,YAAUE,MAAV,EAAiC;AAC/B,UAAMC,UAAU,KAAK,OAAL,KAAiBD,MAAjC;;AAEA,QAAIC,OAAJ,EAAa;AACX,WAAK,OAAL,GAAeD,MAAf;AACA,WAAKE,SAAL,CAAeC,OAAf,CAAwBC,QAAD,IAAc;AACnCA,iBAASJ,MAAT;AACD,OAFD;AAGF;AACF;;AAEAK,aAAoB;AAClB,WAAO,KAAK,OAAZ;AACF;;AA7DwD,CAAnD;AAgEA,IAAMC,gBAAgB,IAAIrB,aAAJ,EAAtB","names":["Subscribable","isServer","OnlineManager","constructor","onOnline","window","addEventListener","onlineListener","offlineListener","removeEventListener","onSubscribe","setEventListener","onUnsubscribe","hasListeners","setup","setOnline","bind","online","changed","listeners","forEach","listener","isOnline","onlineManager"],"sources":["C:\\Users\\Avi Sharma\\Desktop\\zerodha_proj\\client2\\node_modules\\@tanstack\\query-core\\src\\onlineManager.ts"],"sourcesContent":["import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype Listener = (online: boolean) => void\ntype SetupFn = (setOnline: Listener) => (() => void) | undefined\n\nexport class OnlineManager extends Subscribable<Listener> {\n  #online = true\n  #cleanup?: () => void\n\n  #setup: SetupFn\n\n  constructor() {\n    super()\n    this.#setup = (onOnline) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const onlineListener = () => onOnline(true)\n        const offlineListener = () => onOnline(false)\n        // Listen to online\n        window.addEventListener('online', onlineListener, false)\n        window.addEventListener('offline', offlineListener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', onlineListener)\n          window.removeEventListener('offline', offlineListener)\n        }\n      }\n\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.#cleanup) {\n      this.setEventListener(this.#setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.#cleanup?.()\n      this.#cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.#setup = setup\n    this.#cleanup?.()\n    this.#cleanup = setup(this.setOnline.bind(this))\n  }\n\n  setOnline(online: boolean): void {\n    const changed = this.#online !== online\n\n    if (changed) {\n      this.#online = online\n      this.listeners.forEach((listener) => {\n        listener(online)\n      })\n    }\n  }\n\n  isOnline(): boolean {\n    return this.#online\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n"]},"metadata":{},"sourceType":"module"}