{"ast":null,"code":"'use client';\n\nimport useLazyRef from '../useLazyRef/useLazyRef';\nimport useOnMount from '../useOnMount/useOnMount';\nexport class Timeout {\n  constructor() {\n    this.currentId = null;\n\n    this.clear = () => {\n      if (this.currentId !== null) {\n        clearTimeout(this.currentId);\n        this.currentId = null;\n      }\n    };\n\n    this.disposeEffect = () => {\n      return this.clear;\n    };\n  }\n\n  static create() {\n    return new Timeout();\n  }\n  /**\n   * Executes `fn` after `delay`, clearing any previously scheduled call.\n   */\n\n\n  start(delay, fn) {\n    this.clear();\n    this.currentId = setTimeout(() => {\n      this.currentId = null;\n      fn();\n    }, delay);\n  }\n\n}\nexport default function useTimeout() {\n  const timeout = useLazyRef(Timeout.create).current;\n  useOnMount(timeout.disposeEffect);\n  return timeout;\n}","map":{"version":3,"sources":["C:/Users/Avi Sharma/Desktop/zerodha_proj/client2/node_modules/@mui/utils/useTimeout/useTimeout.js"],"names":["useLazyRef","useOnMount","Timeout","constructor","currentId","clear","clearTimeout","disposeEffect","create","start","delay","fn","setTimeout","useTimeout","timeout","current"],"mappings":"AAAA;;AAEA,OAAOA,UAAP,MAAuB,0BAAvB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAO,MAAMC,OAAN,CAAc;AACnBC,EAAAA,WAAW,GAAG;AACZ,SAAKC,SAAL,GAAiB,IAAjB;;AACA,SAAKC,KAAL,GAAa,MAAM;AACjB,UAAI,KAAKD,SAAL,KAAmB,IAAvB,EAA6B;AAC3BE,QAAAA,YAAY,CAAC,KAAKF,SAAN,CAAZ;AACA,aAAKA,SAAL,GAAiB,IAAjB;AACD;AACF,KALD;;AAMA,SAAKG,aAAL,GAAqB,MAAM;AACzB,aAAO,KAAKF,KAAZ;AACD,KAFD;AAGD;;AACY,SAANG,MAAM,GAAG;AACd,WAAO,IAAIN,OAAJ,EAAP;AACD;AACD;AACF;AACA;;;AACEO,EAAAA,KAAK,CAACC,KAAD,EAAQC,EAAR,EAAY;AACf,SAAKN,KAAL;AACA,SAAKD,SAAL,GAAiBQ,UAAU,CAAC,MAAM;AAChC,WAAKR,SAAL,GAAiB,IAAjB;AACAO,MAAAA,EAAE;AACH,KAH0B,EAGxBD,KAHwB,CAA3B;AAID;;AAzBkB;AA2BrB,eAAe,SAASG,UAAT,GAAsB;AACnC,QAAMC,OAAO,GAAGd,UAAU,CAACE,OAAO,CAACM,MAAT,CAAV,CAA2BO,OAA3C;AACAd,EAAAA,UAAU,CAACa,OAAO,CAACP,aAAT,CAAV;AACA,SAAOO,OAAP;AACD","sourcesContent":["'use client';\n\nimport useLazyRef from '../useLazyRef/useLazyRef';\nimport useOnMount from '../useOnMount/useOnMount';\nexport class Timeout {\n  constructor() {\n    this.currentId = null;\n    this.clear = () => {\n      if (this.currentId !== null) {\n        clearTimeout(this.currentId);\n        this.currentId = null;\n      }\n    };\n    this.disposeEffect = () => {\n      return this.clear;\n    };\n  }\n  static create() {\n    return new Timeout();\n  }\n  /**\n   * Executes `fn` after `delay`, clearing any previously scheduled call.\n   */\n  start(delay, fn) {\n    this.clear();\n    this.currentId = setTimeout(() => {\n      this.currentId = null;\n      fn();\n    }, delay);\n  }\n}\nexport default function useTimeout() {\n  const timeout = useLazyRef(Timeout.create).current;\n  useOnMount(timeout.disposeEffect);\n  return timeout;\n}"]},"metadata":{},"sourceType":"module"}