{"ast":null,"code":"// src/queriesObserver.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { QueryObserver } from \"./queryObserver.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { replaceEqualDeep } from \"./utils.js\";\n\nfunction difference(array1, array2) {\n  return array1.filter(x => !array2.includes(x));\n}\n\nfunction replaceAt(array, index, value) {\n  const copy = array.slice(0);\n  copy[index] = value;\n  return copy;\n}\n\nvar QueriesObserver = class extends Subscribable {\n  #client;\n  #result;\n  #queries;\n  #observers;\n  #options;\n  #combinedResult;\n\n  constructor(client, queries, options) {\n    super();\n    this.#client = client;\n    this.#queries = [];\n    this.#observers = [];\n    this.#setResult([]);\n    this.setQueries(queries, options);\n  }\n\n  #setResult(value) {\n    this.#result = value;\n    this.#combinedResult = this.#combineResult(value, this.#options?.combine);\n  }\n\n  onSubscribe() {\n    if (this.listeners.size === 1) {\n      this.#observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.#onUpdate(observer, result);\n        });\n      });\n    }\n  }\n\n  onUnsubscribe() {\n    if (!this.listeners.size) {\n      this.destroy();\n    }\n  }\n\n  destroy() {\n    this.listeners = /* @__PURE__ */new Set();\n    this.#observers.forEach(observer => {\n      observer.destroy();\n    });\n  }\n\n  setQueries(queries, options, notifyOptions) {\n    this.#queries = queries;\n    this.#options = options;\n    notifyManager.batch(() => {\n      const prevObservers = this.#observers;\n      const newObserverMatches = this.#findMatchingObservers(this.#queries);\n      newObserverMatches.forEach(match => match.observer.setOptions(match.defaultedQueryOptions, notifyOptions));\n      const newObservers = newObserverMatches.map(match => match.observer);\n      const newResult = newObservers.map(observer => observer.getCurrentResult());\n      const hasIndexChange = newObservers.some((observer, index) => observer !== prevObservers[index]);\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return;\n      }\n\n      this.#observers = newObservers;\n      this.#setResult(newResult);\n\n      if (!this.hasListeners()) {\n        return;\n      }\n\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy();\n      });\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          this.#onUpdate(observer, result);\n        });\n      });\n      this.#notify();\n    });\n  }\n\n  getCurrentResult() {\n    return this.#combinedResult;\n  }\n\n  getQueries() {\n    return this.#observers.map(observer => observer.getCurrentQuery());\n  }\n\n  getObservers() {\n    return this.#observers;\n  }\n\n  getOptimisticResult(queries, combine) {\n    const matches = this.#findMatchingObservers(queries);\n    const result = matches.map(match => match.observer.getOptimisticResult(match.defaultedQueryOptions));\n    return [result, r => {\n      return this.#combineResult(r ?? result, combine);\n    }, () => {\n      return matches.map((match, index) => {\n        const observerResult = result[index];\n        return !match.defaultedQueryOptions.notifyOnChangeProps ? match.observer.trackResult(observerResult, accessedProp => {\n          matches.forEach(m => {\n            m.observer.trackProp(accessedProp);\n          });\n        }) : observerResult;\n      });\n    }];\n  }\n\n  #combineResult(input, combine) {\n    if (combine) {\n      return replaceEqualDeep(this.#combinedResult, combine(input));\n    }\n\n    return input;\n  }\n\n  #findMatchingObservers(queries) {\n    const prevObservers = this.#observers;\n    const prevObserversMap = new Map(prevObservers.map(observer => [observer.options.queryHash, observer]));\n    const defaultedQueryOptions = queries.map(options => this.#client.defaultQueryOptions(options));\n    const matchingObservers = defaultedQueryOptions.flatMap(defaultedOptions => {\n      const match = prevObserversMap.get(defaultedOptions.queryHash);\n\n      if (match != null) {\n        return [{\n          defaultedQueryOptions: defaultedOptions,\n          observer: match\n        }];\n      }\n\n      return [];\n    });\n    const matchedQueryHashes = new Set(matchingObservers.map(match => match.defaultedQueryOptions.queryHash));\n    const unmatchedQueries = defaultedQueryOptions.filter(defaultedOptions => !matchedQueryHashes.has(defaultedOptions.queryHash));\n\n    const getObserver = options => {\n      const defaultedOptions = this.#client.defaultQueryOptions(options);\n      const currentObserver = this.#observers.find(o => o.options.queryHash === defaultedOptions.queryHash);\n      return currentObserver ?? new QueryObserver(this.#client, defaultedOptions);\n    };\n\n    const newOrReusedObservers = unmatchedQueries.map(options => {\n      return {\n        defaultedQueryOptions: options,\n        observer: getObserver(options)\n      };\n    });\n\n    const sortMatchesByOrderOfQueries = (a, b) => defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);\n\n    return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);\n  }\n\n  #onUpdate(observer, result) {\n    const index = this.#observers.indexOf(observer);\n\n    if (index !== -1) {\n      this.#setResult(replaceAt(this.#result, index, result));\n      this.#notify();\n    }\n  }\n\n  #notify() {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.#result);\n      });\n    });\n  }\n\n};\nexport { QueriesObserver };","map":{"version":3,"mappings":"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","names":["notifyManager","QueryObserver","Subscribable","replaceEqualDeep","difference","array1","array2","filter","x","includes","replaceAt","array","index","value","copy","slice","QueriesObserver","constructor","client","queries","options","setQueries","combine","onSubscribe","listeners","size","forEach","observer","subscribe","result","onUnsubscribe","destroy","Set","notifyOptions","batch","prevObservers","newObserverMatches","match","setOptions","defaultedQueryOptions","newObservers","map","newResult","getCurrentResult","hasIndexChange","some","length","hasListeners","getQueries","getCurrentQuery","getObservers","getOptimisticResult","matches","r","observerResult","notifyOnChangeProps","trackResult","accessedProp","m","trackProp","input","prevObserversMap","Map","queryHash","defaultQueryOptions","matchingObservers","flatMap","defaultedOptions","get","matchedQueryHashes","unmatchedQueries","has","getObserver","currentObserver","find","o","newOrReusedObservers","sortMatchesByOrderOfQueries","a","b","indexOf","concat","sort","listener"],"sources":["C:\\Users\\Avi Sharma\\Desktop\\zerodha_proj\\client2\\node_modules\\@tanstack\\query-core\\src\\queriesObserver.ts"],"sourcesContent":["import { notifyManager } from './notifyManager'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\nimport { replaceEqualDeep } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  QueryObserverOptions,\n  QueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\n\nfunction difference<T>(array1: Array<T>, array2: Array<T>): Array<T> {\n  return array1.filter((x) => !array2.includes(x))\n}\n\nfunction replaceAt<T>(array: Array<T>, index: number, value: T): Array<T> {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\ntype QueriesObserverListener = (result: Array<QueryObserverResult>) => void\n\ntype CombineFn<TCombinedResult> = (\n  result: Array<QueryObserverResult>,\n) => TCombinedResult\n\nexport interface QueriesObserverOptions<\n  TCombinedResult = Array<QueryObserverResult>,\n> {\n  combine?: CombineFn<TCombinedResult>\n}\n\nexport class QueriesObserver<\n  TCombinedResult = Array<QueryObserverResult>,\n> extends Subscribable<QueriesObserverListener> {\n  #client: QueryClient\n  #result!: Array<QueryObserverResult>\n  #queries: Array<QueryObserverOptions>\n  #observers: Array<QueryObserver>\n  #options?: QueriesObserverOptions<TCombinedResult>\n  #combinedResult!: TCombinedResult\n\n  constructor(\n    client: QueryClient,\n    queries: Array<QueryObserverOptions>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n  ) {\n    super()\n\n    this.#client = client\n    this.#queries = []\n    this.#observers = []\n\n    this.#setResult([])\n    this.setQueries(queries, options)\n  }\n\n  #setResult(value: Array<QueryObserverResult>) {\n    this.#result = value\n    this.#combinedResult = this.#combineResult(value, this.#options?.combine)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.size) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: Array<QueryObserverOptions>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.#queries = queries\n    this.#options = options\n\n    notifyManager.batch(() => {\n      const prevObservers = this.#observers\n\n      const newObserverMatches = this.#findMatchingObservers(this.#queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.#observers = newObservers\n      this.#setResult(newResult)\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n\n      this.#notify()\n    })\n  }\n\n  getCurrentResult(): TCombinedResult {\n    return this.#combinedResult\n  }\n\n  getQueries() {\n    return this.#observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.#observers\n  }\n\n  getOptimisticResult(\n    queries: Array<QueryObserverOptions>,\n    combine: CombineFn<TCombinedResult> | undefined,\n  ): [\n    rawResult: Array<QueryObserverResult>,\n    combineResult: (r?: Array<QueryObserverResult>) => TCombinedResult,\n    trackResult: () => Array<QueryObserverResult>,\n  ] {\n    const matches = this.#findMatchingObservers(queries)\n    const result = matches.map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n\n    return [\n      result,\n      (r?: Array<QueryObserverResult>) => {\n        return this.#combineResult(r ?? result, combine)\n      },\n      () => {\n        return matches.map((match, index) => {\n          const observerResult = result[index]!\n          return !match.defaultedQueryOptions.notifyOnChangeProps\n            ? match.observer.trackResult(observerResult, (accessedProp) => {\n                // track property on all observers to ensure proper (synchronized) tracking (#7000)\n                matches.forEach((m) => {\n                  m.observer.trackProp(accessedProp)\n                })\n              })\n            : observerResult\n        })\n      },\n    ]\n  }\n\n  #combineResult(\n    input: Array<QueryObserverResult>,\n    combine: CombineFn<TCombinedResult> | undefined,\n  ): TCombinedResult {\n    if (combine) {\n      return replaceEqualDeep(this.#combinedResult, combine(input))\n    }\n    return input as any\n  }\n\n  #findMatchingObservers(\n    queries: Array<QueryObserverOptions>,\n  ): Array<QueryObserverMatch> {\n    const prevObservers = this.#observers\n    const prevObserversMap = new Map(\n      prevObservers.map((observer) => [observer.options.queryHash, observer]),\n    )\n\n    const defaultedQueryOptions = queries.map((options) =>\n      this.#client.defaultQueryOptions(options),\n    )\n\n    const matchingObservers: Array<QueryObserverMatch> =\n      defaultedQueryOptions.flatMap((defaultedOptions) => {\n        const match = prevObserversMap.get(defaultedOptions.queryHash)\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      })\n\n    const matchedQueryHashes = new Set(\n      matchingObservers.map((match) => match.defaultedQueryOptions.queryHash),\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      (defaultedOptions) => !matchedQueryHashes.has(defaultedOptions.queryHash),\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.#client.defaultQueryOptions(options)\n      const currentObserver = this.#observers.find(\n        (o) => o.options.queryHash === defaultedOptions.queryHash,\n      )\n      return (\n        currentObserver ?? new QueryObserver(this.#client, defaultedOptions)\n      )\n    }\n\n    const newOrReusedObservers: Array<QueryObserverMatch> =\n      unmatchedQueries.map((options) => {\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      })\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch,\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  #onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.#observers.indexOf(observer)\n    if (index !== -1) {\n      this.#setResult(replaceAt(this.#result, index, result))\n      this.#notify()\n    }\n  }\n\n  #notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(this.#result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n"]},"metadata":{},"sourceType":"module"}