{"ast":null,"code":"\"use client\"; // src/errorBoundaryUtils.ts\n\nimport * as React from \"react\";\nimport { shouldThrowError } from \"./utils.js\";\n\nvar ensurePreventErrorBoundaryRetry = (options, errorResetBoundary) => {\n  if (options.suspense || options.throwOnError) {\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false;\n    }\n  }\n};\n\nvar useClearResetErrorBoundary = errorResetBoundary => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset();\n  }, [errorResetBoundary]);\n};\n\nvar getHasError = _ref => {\n  let {\n    result,\n    errorResetBoundary,\n    throwOnError,\n    query\n  } = _ref;\n  return result.isError && !errorResetBoundary.isReset() && !result.isFetching && query && shouldThrowError(throwOnError, [result.error, query]);\n};\n\nexport { ensurePreventErrorBoundaryRetry, getHasError, useClearResetErrorBoundary };","map":{"version":3,"mappings":";;AACA,YAAYA,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,YAAjC;;AAUO,IAAMC,kCAAkC,CAO7CC,OAP6C,EAc7CC,kBAd6C,KAe1C;AACH,MAAID,QAAQE,QAAR,IAAoBF,QAAQG,YAAhC,EAA8C;AAE5C,QAAI,CAACF,mBAAmBG,OAAnB,EAAL,EAAmC;AACjCJ,cAAQK,YAAR,GAAuB,KAAvB;AACF;AACF;AACF,CAtBO;;AAwBA,IAAMC,6BACXL,kBADwC,IAErC;AACGJ,kBAAU,MAAM;AACpBI,uBAAmBM,UAAnB;AACF,GAFM,EAEH,CAACN,kBAAD,CAFG;AAGR,CANO;;AAQA,IAAMO,cAAc,QAgBrB;AAAA,MAVJ;AACAC,UADA;AAEAR,sBAFA;AAGAE,gBAHA;AAIAO;AAJA,GAUI;AACJ,SACED,OAAOE,OAAP,IACA,CAACV,mBAAmBG,OAAnB,EADD,IAEA,CAACK,OAAOG,UAFR,IAGAF,KAHA,IAIAZ,iBAAiBK,YAAjB,EAA+B,CAACM,OAAOI,KAAR,EAAeH,KAAf,CAA/B,CALF;AAOF,CAxBO","names":["React","shouldThrowError","ensurePreventErrorBoundaryRetry","options","errorResetBoundary","suspense","throwOnError","isReset","retryOnMount","useClearResetErrorBoundary","clearReset","getHasError","result","query","isError","isFetching","error"],"sources":["C:\\Users\\Avi Sharma\\Desktop\\zerodha_proj\\client2\\node_modules\\@tanstack\\react-query\\src\\errorBoundaryUtils.ts"],"sourcesContent":["'use client'\nimport * as React from 'react'\nimport { shouldThrowError } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  ThrowOnError,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (options.suspense || options.throwOnError) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  throwOnError,\n  query,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  throwOnError: ThrowOnError<TQueryFnData, TError, TQueryData, TQueryKey>\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey> | undefined\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    query &&\n    shouldThrowError(throwOnError, [result.error, query])\n  )\n}\n"]},"metadata":{},"sourceType":"module"}