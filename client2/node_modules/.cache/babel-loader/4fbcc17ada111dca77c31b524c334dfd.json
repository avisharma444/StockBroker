{"ast":null,"code":"\"use client\"; // src/useSuspenseInfiniteQuery.ts\n\nimport { InfiniteQueryObserver } from \"@tanstack/query-core\";\nimport { useBaseQuery } from \"./useBaseQuery.js\";\nimport { defaultThrowOnError } from \"./suspense.js\";\n\nfunction useSuspenseInfiniteQuery(options, queryClient) {\n  return useBaseQuery({ ...options,\n    enabled: true,\n    suspense: true,\n    throwOnError: defaultThrowOnError\n  }, InfiniteQueryObserver, queryClient);\n}\n\nexport { useSuspenseInfiniteQuery };","map":{"version":3,"mappings":";;AACA,SAASA,qBAAT,QAAsC,sBAAtC;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,mBAAT,QAAoC,eAApC;;AAgBO,SAASC,wBAAT,CAOLC,OAPK,EAeLC,WAfK,EAgB0C;AAC/C,SAAOJ,aACL,EACE,GAAGG,OADL;AAEEE,aAAS,IAFX;AAGEC,cAAU,IAHZ;AAIEC,kBAAcN;AAJhB,GADK,EAOLF,qBAPK,EAQLK,WARK,CAAP;AAUF","names":["InfiniteQueryObserver","useBaseQuery","defaultThrowOnError","useSuspenseInfiniteQuery","options","queryClient","enabled","suspense","throwOnError"],"sources":["C:\\Users\\Avi Sharma\\Desktop\\zerodha_proj\\client2\\node_modules\\@tanstack\\react-query\\src\\useSuspenseInfiniteQuery.ts"],"sourcesContent":["'use client'\nimport { InfiniteQueryObserver } from '@tanstack/query-core'\nimport { useBaseQuery } from './useBaseQuery'\nimport { defaultThrowOnError } from './suspense'\nimport type {\n  InfiniteQueryObserverSuccessResult,\n  QueryObserver,\n} from '@tanstack/query-core'\nimport type {\n  DefaultError,\n  InfiniteData,\n  QueryClient,\n  QueryKey,\n} from '@tanstack/query-core'\nimport type {\n  UseSuspenseInfiniteQueryOptions,\n  UseSuspenseInfiniteQueryResult,\n} from './types'\n\nexport function useSuspenseInfiniteQuery<\n  TQueryFnData,\n  TError = DefaultError,\n  TData = InfiniteData<TQueryFnData>,\n  TQueryKey extends QueryKey = QueryKey,\n  TPageParam = unknown,\n>(\n  options: UseSuspenseInfiniteQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryFnData,\n    TQueryKey,\n    TPageParam\n  >,\n  queryClient?: QueryClient,\n): UseSuspenseInfiniteQueryResult<TData, TError> {\n  return useBaseQuery(\n    {\n      ...options,\n      enabled: true,\n      suspense: true,\n      throwOnError: defaultThrowOnError,\n    },\n    InfiniteQueryObserver as typeof QueryObserver,\n    queryClient,\n  ) as InfiniteQueryObserverSuccessResult<TData, TError>\n}\n"]},"metadata":{},"sourceType":"module"}