{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alpha = alpha;\nexports.blend = blend;\nexports.colorChannel = void 0;\nexports.darken = darken;\nexports.decomposeColor = decomposeColor;\nexports.emphasize = emphasize;\nexports.getContrastRatio = getContrastRatio;\nexports.getLuminance = getLuminance;\nexports.hexToRgb = hexToRgb;\nexports.hslToRgb = hslToRgb;\nexports.lighten = lighten;\nexports.private_safeAlpha = private_safeAlpha;\nexports.private_safeColorChannel = void 0;\nexports.private_safeDarken = private_safeDarken;\nexports.private_safeEmphasize = private_safeEmphasize;\nexports.private_safeLighten = private_safeLighten;\nexports.recomposeColor = recomposeColor;\nexports.rgbToHex = rgbToHex;\n\nvar _formatMuiErrorMessage2 = _interopRequireDefault(require(\"@mui/utils/formatMuiErrorMessage\"));\n\nvar _clamp = _interopRequireDefault(require(\"@mui/utils/clamp\"));\n/* eslint-disable @typescript-eslint/naming-convention */\n\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\n\n\nfunction clampWrapper(value) {\n  let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n\n  return (0, _clamp.default)(value, min, max);\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nfunction hexToRgb(color) {\n  color = color.slice(1);\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', ')})` : '';\n}\n\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\n\n\nfunction decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported \\`${color}\\` color.\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : (0, _formatMuiErrorMessage2.default)(9, color));\n  }\n\n  let values = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].slice(1);\n    }\n\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: unsupported \\`${colorSpace}\\` color space.\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : (0, _formatMuiErrorMessage2.default)(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values,\n    colorSpace\n  };\n}\n/**\n * Returns a channel created from the input color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {string} - The channel for the color, that can be used in rgba or hsla colors\n */\n\n\nconst colorChannel = color => {\n  const decomposedColor = decomposeColor(color);\n  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf('hsl') !== -1 && idx !== 0 ? `${val}%` : val).join(' ');\n};\n\nexports.colorChannel = colorChannel;\n\nconst private_safeColorChannel = (color, warning) => {\n  try {\n    return colorChannel(color);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n\n    return color;\n  }\n};\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\n\nexports.private_safeColorChannel = private_safeColorChannel;\n\nfunction recomposeColor(color) {\n  const {\n    type,\n    colorSpace\n  } = color;\n  let {\n    values\n  } = color;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n\n  if (type.indexOf('color') !== -1) {\n    values = `${colorSpace} ${values.join(' ')}`;\n  } else {\n    values = `${values.join(', ')}`;\n  }\n\n  return `${type}(${values})`;\n}\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\n\n\nfunction rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  const {\n    values\n  } = decomposeColor(color);\n  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;\n}\n/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\n\n\nfunction hslToRgb(color) {\n  color = decomposeColor(color);\n  const {\n    values\n  } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n\n  const f = function (n) {\n    let k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;\n    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  };\n\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\n\nfunction getLuminance(color) {\n  color = decomposeColor(color);\n  let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\n\n\nfunction getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * Sets the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction alpha(color, value) {\n  color = decomposeColor(color);\n  value = clampWrapper(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  if (color.type === 'color') {\n    color.values[3] = `/${value}`;\n  } else {\n    color.values[3] = value;\n  }\n\n  return recomposeColor(color);\n}\n\nfunction private_safeAlpha(color, value, warning) {\n  try {\n    return alpha(color, value);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n\n    return color;\n  }\n}\n/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clampWrapper(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n\nfunction private_safeDarken(color, coefficient, warning) {\n  try {\n    return darken(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n\n    return color;\n  }\n}\n/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clampWrapper(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (1 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n\nfunction private_safeLighten(color, coefficient, warning) {\n  try {\n    return lighten(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n\n    return color;\n  }\n}\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction emphasize(color) {\n  let coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n\nfunction private_safeEmphasize(color, coefficient, warning) {\n  try {\n    return private_safeEmphasize(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n\n    return color;\n  }\n}\n/**\n * Blend a transparent overlay color with a background color, resulting in a single\n * RGB color.\n * @param {string} background - CSS color\n * @param {string} overlay - CSS color\n * @param {number} opacity - Opacity multiplier in the range 0 - 1\n * @param {number} [gamma=1.0] - Gamma correction factor. For gamma-correct blending, 2.2 is usual.\n */\n\n\nfunction blend(background, overlay, opacity) {\n  let gamma = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1.0;\n\n  const blendChannel = (b, o) => Math.round((b ** (1 / gamma) * (1 - opacity) + o ** (1 / gamma) * opacity) ** gamma);\n\n  const backgroundColor = decomposeColor(background);\n  const overlayColor = decomposeColor(overlay);\n  const rgb = [blendChannel(backgroundColor.values[0], overlayColor.values[0]), blendChannel(backgroundColor.values[1], overlayColor.values[1]), blendChannel(backgroundColor.values[2], overlayColor.values[2])];\n  return recomposeColor({\n    type: 'rgb',\n    values: rgb\n  });\n}","map":{"version":3,"sources":["C:/Users/Avi Sharma/Desktop/zerodha_proj/client2/node_modules/@mui/system/colorManipulator.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","alpha","blend","colorChannel","darken","decomposeColor","emphasize","getContrastRatio","getLuminance","hexToRgb","hslToRgb","lighten","private_safeAlpha","private_safeColorChannel","private_safeDarken","private_safeEmphasize","private_safeLighten","recomposeColor","rgbToHex","_formatMuiErrorMessage2","_clamp","clampWrapper","min","max","process","env","NODE_ENV","console","error","default","color","slice","re","RegExp","length","colors","match","map","n","index","parseInt","Math","round","join","intToHex","int","hex","toString","type","charAt","marker","indexOf","substring","Error","values","colorSpace","split","shift","parseFloat","decomposedColor","val","idx","warning","warn","i","h","s","l","a","f","k","rgb","push","Number","toFixed","foreground","background","lumA","lumB","coefficient","overlay","opacity","gamma","blendChannel","b","o","backgroundColor","overlayColor"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alpha = alpha;\nexports.blend = blend;\nexports.colorChannel = void 0;\nexports.darken = darken;\nexports.decomposeColor = decomposeColor;\nexports.emphasize = emphasize;\nexports.getContrastRatio = getContrastRatio;\nexports.getLuminance = getLuminance;\nexports.hexToRgb = hexToRgb;\nexports.hslToRgb = hslToRgb;\nexports.lighten = lighten;\nexports.private_safeAlpha = private_safeAlpha;\nexports.private_safeColorChannel = void 0;\nexports.private_safeDarken = private_safeDarken;\nexports.private_safeEmphasize = private_safeEmphasize;\nexports.private_safeLighten = private_safeLighten;\nexports.recomposeColor = recomposeColor;\nexports.rgbToHex = rgbToHex;\nvar _formatMuiErrorMessage2 = _interopRequireDefault(require(\"@mui/utils/formatMuiErrorMessage\"));\nvar _clamp = _interopRequireDefault(require(\"@mui/utils/clamp\"));\n/* eslint-disable @typescript-eslint/naming-convention */\n\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clampWrapper(value, min = 0, max = 1) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n  return (0, _clamp.default)(value, min, max);\n}\n\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\nfunction hexToRgb(color) {\n  color = color.slice(1);\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', ')})` : '';\n}\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\nfunction decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported \\`${color}\\` color.\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : (0, _formatMuiErrorMessage2.default)(9, color));\n  }\n  let values = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].slice(1);\n    }\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: unsupported \\`${colorSpace}\\` color space.\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : (0, _formatMuiErrorMessage2.default)(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values,\n    colorSpace\n  };\n}\n\n/**\n * Returns a channel created from the input color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {string} - The channel for the color, that can be used in rgba or hsla colors\n */\nconst colorChannel = color => {\n  const decomposedColor = decomposeColor(color);\n  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf('hsl') !== -1 && idx !== 0 ? `${val}%` : val).join(' ');\n};\nexports.colorChannel = colorChannel;\nconst private_safeColorChannel = (color, warning) => {\n  try {\n    return colorChannel(color);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n};\n\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\nexports.private_safeColorChannel = private_safeColorChannel;\nfunction recomposeColor(color) {\n  const {\n    type,\n    colorSpace\n  } = color;\n  let {\n    values\n  } = color;\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n  if (type.indexOf('color') !== -1) {\n    values = `${colorSpace} ${values.join(' ')}`;\n  } else {\n    values = `${values.join(', ')}`;\n  }\n  return `${type}(${values})`;\n}\n\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\nfunction rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n  const {\n    values\n  } = decomposeColor(color);\n  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;\n}\n\n/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\nfunction hslToRgb(color) {\n  color = decomposeColor(color);\n  const {\n    values\n  } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\nfunction getLuminance(color) {\n  color = decomposeColor(color);\n  let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  });\n\n  // Truncate at 3 digits\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\nfunction getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\n/**\n * Sets the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction alpha(color, value) {\n  color = decomposeColor(color);\n  value = clampWrapper(value);\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n  if (color.type === 'color') {\n    color.values[3] = `/${value}`;\n  } else {\n    color.values[3] = value;\n  }\n  return recomposeColor(color);\n}\nfunction private_safeAlpha(color, value, warning) {\n  try {\n    return alpha(color, value);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clampWrapper(coefficient);\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nfunction private_safeDarken(color, coefficient, warning) {\n  try {\n    return darken(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clampWrapper(coefficient);\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (1 - color.values[i]) * coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nfunction private_safeLighten(color, coefficient, warning) {\n  try {\n    return lighten(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nfunction emphasize(color, coefficient = 0.15) {\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\nfunction private_safeEmphasize(color, coefficient, warning) {\n  try {\n    return private_safeEmphasize(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Blend a transparent overlay color with a background color, resulting in a single\n * RGB color.\n * @param {string} background - CSS color\n * @param {string} overlay - CSS color\n * @param {number} opacity - Opacity multiplier in the range 0 - 1\n * @param {number} [gamma=1.0] - Gamma correction factor. For gamma-correct blending, 2.2 is usual.\n */\nfunction blend(background, overlay, opacity, gamma = 1.0) {\n  const blendChannel = (b, o) => Math.round((b ** (1 / gamma) * (1 - opacity) + o ** (1 / gamma) * opacity) ** gamma);\n  const backgroundColor = decomposeColor(background);\n  const overlayColor = decomposeColor(overlay);\n  const rgb = [blendChannel(backgroundColor.values[0], overlayColor.values[0]), blendChannel(backgroundColor.values[1], overlayColor.values[1]), blendChannel(backgroundColor.values[2], overlayColor.values[2])];\n  return recomposeColor({\n    type: 'rgb',\n    values: rgb\n  });\n}"]},"metadata":{},"sourceType":"script"}