{"ast":null,"code":"// src/removable.ts\nimport { isServer, isValidTimeout } from \"./utils.js\";\nvar Removable = class {\n  #gcTimeout;\n\n  destroy() {\n    this.clearGcTimeout();\n  }\n\n  scheduleGc() {\n    this.clearGcTimeout();\n\n    if (isValidTimeout(this.gcTime)) {\n      this.#gcTimeout = setTimeout(() => {\n        this.optionalRemove();\n      }, this.gcTime);\n    }\n  }\n\n  updateGcTime(newGcTime) {\n    this.gcTime = Math.max(this.gcTime || 0, newGcTime ?? (isServer ? Infinity : 5 * 60 * 1e3));\n  }\n\n  clearGcTimeout() {\n    if (this.#gcTimeout) {\n      clearTimeout(this.#gcTimeout);\n      this.#gcTimeout = void 0;\n    }\n  }\n\n};\nexport { Removable };","map":{"version":3,"mappings":";AAAA,SAASA,QAAT,EAAmBC,cAAnB,QAAyC,YAAzC;AAEO,IAAeC,YAAf,MAAyB;AAE9B;;AAEAC,YAAgB;AACd,SAAKC,cAAL;AACF;;AAEUC,eAAmB;AAC3B,SAAKD,cAAL;;AAEA,QAAIH,eAAe,KAAKK,MAApB,CAAJ,EAAiC;AAC/B,WAAK,UAAL,GAAkBC,WAAW,MAAM;AACjC,aAAKC,cAAL;AACF,OAFkB,EAEf,KAAKF,MAFU,CAAlB;AAGF;AACF;;AAEUG,eAAaC,SAAb,EAAkD;AAE1D,SAAKJ,MAAL,GAAcK,KAAKC,GAAL,CACZ,KAAKN,MAAL,IAAe,CADH,EAEZI,cAAcV,WAAWa,QAAX,GAAsB,IAAI,EAAJ,GAAS,GAA7C,CAFY,CAAd;AAIF;;AAEUT,mBAAiB;AACzB,QAAI,KAAK,UAAT,EAAqB;AACnBU,mBAAa,KAAK,UAAlB;AACA,WAAK,UAAL,GAAkB,MAAlB;AACF;AACF;;AA/B8B,CAAzB","names":["isServer","isValidTimeout","Removable","destroy","clearGcTimeout","scheduleGc","gcTime","setTimeout","optionalRemove","updateGcTime","newGcTime","Math","max","Infinity","clearTimeout"],"sources":["C:\\Users\\Avi Sharma\\Desktop\\zerodha_proj\\client2\\node_modules\\@tanstack\\query-core\\src\\removable.ts"],"sourcesContent":["import { isServer, isValidTimeout } from './utils'\n\nexport abstract class Removable {\n  gcTime!: number\n  #gcTimeout?: ReturnType<typeof setTimeout>\n\n  destroy(): void {\n    this.clearGcTimeout()\n  }\n\n  protected scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.gcTime)) {\n      this.#gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.gcTime)\n    }\n  }\n\n  protected updateGcTime(newGcTime: number | undefined): void {\n    // Default to 5 minutes (Infinity for server-side) if no gcTime is set\n    this.gcTime = Math.max(\n      this.gcTime || 0,\n      newGcTime ?? (isServer ? Infinity : 5 * 60 * 1000),\n    )\n  }\n\n  protected clearGcTimeout() {\n    if (this.#gcTimeout) {\n      clearTimeout(this.#gcTimeout)\n      this.#gcTimeout = undefined\n    }\n  }\n\n  protected abstract optionalRemove(): void\n}\n"]},"metadata":{},"sourceType":"module"}