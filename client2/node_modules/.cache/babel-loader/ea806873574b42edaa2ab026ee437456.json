{"ast":null,"code":"\"use client\"; // src/HydrationBoundary.tsx\n\nimport * as React from \"react\";\nimport { hydrate } from \"@tanstack/query-core\";\nimport { useQueryClient } from \"./QueryClientProvider.js\";\n\nvar HydrationBoundary = _ref => {\n  let {\n    children,\n    options = {},\n    state,\n    queryClient\n  } = _ref;\n  const client = useQueryClient(queryClient);\n  const [hydrationQueue, setHydrationQueue] = React.useState();\n  const optionsRef = React.useRef(options);\n  optionsRef.current = options;\n  React.useMemo(() => {\n    if (state) {\n      if (typeof state !== \"object\") {\n        return;\n      }\n\n      const queryCache = client.getQueryCache();\n      const queries = state.queries || [];\n      const newQueries = [];\n      const existingQueries = [];\n\n      for (const dehydratedQuery of queries) {\n        const existingQuery = queryCache.get(dehydratedQuery.queryHash);\n\n        if (!existingQuery) {\n          newQueries.push(dehydratedQuery);\n        } else {\n          const hydrationIsNewer = dehydratedQuery.state.dataUpdatedAt > existingQuery.state.dataUpdatedAt;\n          const queryAlreadyQueued = hydrationQueue?.find(query => query.queryHash === dehydratedQuery.queryHash);\n\n          if (hydrationIsNewer && (!queryAlreadyQueued || dehydratedQuery.state.dataUpdatedAt > queryAlreadyQueued.state.dataUpdatedAt)) {\n            existingQueries.push(dehydratedQuery);\n          }\n        }\n      }\n\n      if (newQueries.length > 0) {\n        hydrate(client, {\n          queries: newQueries\n        }, optionsRef.current);\n      }\n\n      if (existingQueries.length > 0) {\n        setHydrationQueue(prev => prev ? [...prev, ...existingQueries] : existingQueries);\n      }\n    }\n  }, [client, hydrationQueue, state]);\n  React.useEffect(() => {\n    if (hydrationQueue) {\n      hydrate(client, {\n        queries: hydrationQueue\n      }, optionsRef.current);\n      setHydrationQueue(void 0);\n    }\n  }, [client, hydrationQueue]);\n  return children;\n};\n\nexport { HydrationBoundary };","map":{"version":3,"mappings":";;AACA,YAAYA,KAAZ,MAAuB,OAAvB;AAEA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,cAAT,QAA+B,0BAA/B;;AAoBO,IAAMC,oBAAoB,QAKH;AAAA,MALI;AAChCC,YADgC;AAEhCC,cAAU,EAFsB;AAGhCC,SAHgC;AAIhCC;AAJgC,GAKJ;AAC5B,QAAMC,SAASN,eAAeK,WAAf,CAAf;AACA,QAAM,CAACE,cAAD,EAAiBC,iBAAjB,IAA4CV,gBAAlD;AAIA,QAAMW,aAAmBX,aAAOK,OAAP,CAAzB;AACAM,aAAWC,OAAX,GAAqBP,OAArB;AAiBML,gBAAQ,MAAM;AAClB,QAAIM,KAAJ,EAAW;AACT,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B;AACF;;AAEA,YAAMO,aAAaL,OAAOM,aAAP,EAAnB;AAEA,YAAMC,UAAWT,MAA0BS,OAA1B,IAAqC,EAAtD;AAEA,YAAMC,aAAyC,EAA/C;AACA,YAAMC,kBAA8C,EAApD;;AACA,iBAAWC,eAAX,IAA8BH,OAA9B,EAAuC;AACrC,cAAMI,gBAAgBN,WAAWO,GAAX,CAAeF,gBAAgBG,SAA/B,CAAtB;;AAEA,YAAI,CAACF,aAAL,EAAoB;AAClBH,qBAAWM,IAAX,CAAgBJ,eAAhB;AACF,SAFA,MAEO;AACL,gBAAMK,mBACJL,gBAAgBZ,KAAhB,CAAsBkB,aAAtB,GACAL,cAAcb,KAAd,CAAoBkB,aAFtB;AAGA,gBAAMC,qBAAqBhB,gBAAgBiB,IAAhB,CACxBC,KAAD,IAAWA,MAAMN,SAAN,KAAoBH,gBAAgBG,SADtB,CAA3B;;AAIA,cACEE,qBACC,CAACE,kBAAD,IACCP,gBAAgBZ,KAAhB,CAAsBkB,aAAtB,GACEC,mBAAmBnB,KAAnB,CAAyBkB,aAH7B,CADF,EAKE;AACAP,4BAAgBK,IAAhB,CAAqBJ,eAArB;AACF;AACF;AACF;;AAEA,UAAIF,WAAWY,MAAX,GAAoB,CAAxB,EAA2B;AAGzB3B,gBAAQO,MAAR,EAAgB;AAAEO,mBAASC;AAAX,SAAhB,EAAyCL,WAAWC,OAApD;AACF;;AACA,UAAIK,gBAAgBW,MAAhB,GAAyB,CAA7B,EAAgC;AAC9BlB,0BAAmBmB,IAAD,IAChBA,OAAO,CAAC,GAAGA,IAAJ,EAAU,GAAGZ,eAAb,CAAP,GAAuCA,eADzC;AAGF;AACF;AACF,GA/CM,EA+CH,CAACT,MAAD,EAASC,cAAT,EAAyBH,KAAzB,CA/CG;AAiDAN,kBAAU,MAAM;AACpB,QAAIS,cAAJ,EAAoB;AAClBR,cAAQO,MAAR,EAAgB;AAAEO,iBAASN;AAAX,OAAhB,EAA6CE,WAAWC,OAAxD;AACAF,wBAAkB,MAAlB;AACF;AACF,GALM,EAKH,CAACF,MAAD,EAASC,cAAT,CALG;AAON,SAAOL,QAAP;AACF,CAtFO","names":["React","hydrate","useQueryClient","HydrationBoundary","children","options","state","queryClient","client","hydrationQueue","setHydrationQueue","optionsRef","current","queryCache","getQueryCache","queries","newQueries","existingQueries","dehydratedQuery","existingQuery","get","queryHash","push","hydrationIsNewer","dataUpdatedAt","queryAlreadyQueued","find","query","length","prev"],"sources":["C:\\Users\\Avi Sharma\\Desktop\\zerodha_proj\\client2\\node_modules\\@tanstack\\react-query\\src\\HydrationBoundary.tsx"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport { hydrate } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type {\n  DehydratedState,\n  HydrateOptions,\n  OmitKeyof,\n  QueryClient,\n} from '@tanstack/query-core'\n\nexport interface HydrationBoundaryProps {\n  state?: unknown\n  options?: OmitKeyof<HydrateOptions, 'defaultOptions'> & {\n    defaultOptions?: OmitKeyof<\n      Exclude<HydrateOptions['defaultOptions'], undefined>,\n      'mutations'\n    >\n  }\n  children?: React.ReactNode\n  queryClient?: QueryClient\n}\n\nexport const HydrationBoundary = ({\n  children,\n  options = {},\n  state,\n  queryClient,\n}: HydrationBoundaryProps) => {\n  const client = useQueryClient(queryClient)\n  const [hydrationQueue, setHydrationQueue] = React.useState<\n    DehydratedState['queries'] | undefined\n  >()\n\n  const optionsRef = React.useRef(options)\n  optionsRef.current = options\n\n  // This useMemo is for performance reasons only, everything inside it _must_\n  // be safe to run in every render and code here should be read as \"in render\".\n  //\n  // This code needs to happen during the render phase, because after initial\n  // SSR, hydration needs to happen _before_ children render. Also, if hydrating\n  // during a transition, we want to hydrate as much as is safe in render so\n  // we can prerender as much as possible.\n  //\n  // For any queries that already exist in the cache, we want to hold back on\n  // hydrating until _after_ the render phase. The reason for this is that during\n  // transitions, we don't want the existing queries and observers to update to\n  // the new data on the current page, only _after_ the transition is committed.\n  // If the transition is aborted, we will have hydrated any _new_ queries, but\n  // we throw away the fresh data for any existing ones to avoid unexpectedly\n  // updating the UI.\n  React.useMemo(() => {\n    if (state) {\n      if (typeof state !== 'object') {\n        return\n      }\n\n      const queryCache = client.getQueryCache()\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      const queries = (state as DehydratedState).queries || []\n\n      const newQueries: DehydratedState['queries'] = []\n      const existingQueries: DehydratedState['queries'] = []\n      for (const dehydratedQuery of queries) {\n        const existingQuery = queryCache.get(dehydratedQuery.queryHash)\n\n        if (!existingQuery) {\n          newQueries.push(dehydratedQuery)\n        } else {\n          const hydrationIsNewer =\n            dehydratedQuery.state.dataUpdatedAt >\n            existingQuery.state.dataUpdatedAt\n          const queryAlreadyQueued = hydrationQueue?.find(\n            (query) => query.queryHash === dehydratedQuery.queryHash,\n          )\n\n          if (\n            hydrationIsNewer &&\n            (!queryAlreadyQueued ||\n              dehydratedQuery.state.dataUpdatedAt >\n                queryAlreadyQueued.state.dataUpdatedAt)\n          ) {\n            existingQueries.push(dehydratedQuery)\n          }\n        }\n      }\n\n      if (newQueries.length > 0) {\n        // It's actually fine to call this with queries/state that already exists\n        // in the cache, or is older. hydrate() is idempotent for queries.\n        hydrate(client, { queries: newQueries }, optionsRef.current)\n      }\n      if (existingQueries.length > 0) {\n        setHydrationQueue((prev) =>\n          prev ? [...prev, ...existingQueries] : existingQueries,\n        )\n      }\n    }\n  }, [client, hydrationQueue, state])\n\n  React.useEffect(() => {\n    if (hydrationQueue) {\n      hydrate(client, { queries: hydrationQueue }, optionsRef.current)\n      setHydrationQueue(undefined)\n    }\n  }, [client, hydrationQueue])\n\n  return children as React.ReactElement\n}\n"]},"metadata":{},"sourceType":"module"}