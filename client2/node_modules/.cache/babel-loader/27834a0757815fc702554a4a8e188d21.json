{"ast":null,"code":"// src/retryer.ts\nimport { focusManager } from \"./focusManager.js\";\nimport { onlineManager } from \"./onlineManager.js\";\nimport { isServer, sleep } from \"./utils.js\";\n\nfunction defaultRetryDelay(failureCount) {\n  return Math.min(1e3 * 2 ** failureCount, 3e4);\n}\n\nfunction canFetch(networkMode) {\n  return (networkMode ?? \"online\") === \"online\" ? onlineManager.isOnline() : true;\n}\n\nvar CancelledError = class {\n  constructor(options) {\n    this.revert = options?.revert;\n    this.silent = options?.silent;\n  }\n\n};\n\nfunction isCancelledError(value) {\n  return value instanceof CancelledError;\n}\n\nfunction createRetryer(config) {\n  let isRetryCancelled = false;\n  let failureCount = 0;\n  let isResolved = false;\n  let continueFn;\n  let promiseResolve;\n  let promiseReject;\n  const promise = new Promise((outerResolve, outerReject) => {\n    promiseResolve = outerResolve;\n    promiseReject = outerReject;\n  });\n\n  const cancel = cancelOptions => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions));\n      config.abort?.();\n    }\n  };\n\n  const cancelRetry = () => {\n    isRetryCancelled = true;\n  };\n\n  const continueRetry = () => {\n    isRetryCancelled = false;\n  };\n\n  const shouldPause = () => !focusManager.isFocused() || config.networkMode !== \"always\" && !onlineManager.isOnline();\n\n  const resolve = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onSuccess?.(value);\n      continueFn?.();\n      promiseResolve(value);\n    }\n  };\n\n  const reject = value => {\n    if (!isResolved) {\n      isResolved = true;\n      config.onError?.(value);\n      continueFn?.();\n      promiseReject(value);\n    }\n  };\n\n  const pause = () => {\n    return new Promise(continueResolve => {\n      continueFn = value => {\n        const canContinue = isResolved || !shouldPause();\n\n        if (canContinue) {\n          continueResolve(value);\n        }\n\n        return canContinue;\n      };\n\n      config.onPause?.();\n    }).then(() => {\n      continueFn = void 0;\n\n      if (!isResolved) {\n        config.onContinue?.();\n      }\n    });\n  };\n\n  const run = () => {\n    if (isResolved) {\n      return;\n    }\n\n    let promiseOrValue;\n\n    try {\n      promiseOrValue = config.fn();\n    } catch (error) {\n      promiseOrValue = Promise.reject(error);\n    }\n\n    Promise.resolve(promiseOrValue).then(resolve).catch(error => {\n      if (isResolved) {\n        return;\n      }\n\n      const retry = config.retry ?? (isServer ? 0 : 3);\n      const retryDelay = config.retryDelay ?? defaultRetryDelay;\n      const delay = typeof retryDelay === \"function\" ? retryDelay(failureCount, error) : retryDelay;\n      const shouldRetry = retry === true || typeof retry === \"number\" && failureCount < retry || typeof retry === \"function\" && retry(failureCount, error);\n\n      if (isRetryCancelled || !shouldRetry) {\n        reject(error);\n        return;\n      }\n\n      failureCount++;\n      config.onFail?.(failureCount, error);\n      sleep(delay).then(() => {\n        if (shouldPause()) {\n          return pause();\n        }\n\n        return;\n      }).then(() => {\n        if (isRetryCancelled) {\n          reject(error);\n        } else {\n          run();\n        }\n      });\n    });\n  };\n\n  if (canFetch(config.networkMode)) {\n    run();\n  } else {\n    pause().then(run);\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      const didContinue = continueFn?.();\n      return didContinue ? promise : Promise.resolve();\n    },\n    cancelRetry,\n    continueRetry\n  };\n}\n\nexport { CancelledError, canFetch, createRetryer, isCancelledError };","map":{"version":3,"mappings":"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","names":["focusManager","onlineManager","isServer","sleep","defaultRetryDelay","failureCount","Math","min","canFetch","networkMode","isOnline","CancelledError","constructor","options","revert","silent","isCancelledError","value","createRetryer","config","isRetryCancelled","isResolved","continueFn","promiseResolve","promiseReject","promise","Promise","outerResolve","outerReject","cancel","cancelOptions","reject","abort","cancelRetry","continueRetry","shouldPause","isFocused","resolve","onSuccess","onError","pause","continueResolve","canContinue","onPause","then","onContinue","run","promiseOrValue","fn","error","catch","retry","retryDelay","delay","shouldRetry","onFail","continue","didContinue"],"sources":["C:\\Users\\Avi Sharma\\Desktop\\zerodha_proj\\client2\\node_modules\\@tanstack\\query-core\\src\\retryer.ts"],"sourcesContent":["import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { isServer, sleep } from './utils'\nimport type { CancelOptions, DefaultError, NetworkMode } from './types'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = DefaultError> {\n  fn: () => TData | Promise<TData>\n  abort?: () => void\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n  networkMode: NetworkMode | undefined\n}\n\nexport interface Retryer<TData = unknown> {\n  promise: Promise<TData>\n  cancel: (cancelOptions?: CancelOptions) => void\n  continue: () => Promise<unknown>\n  cancelRetry: () => void\n  continueRetry: () => void\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError = DefaultError> = (\n  failureCount: number,\n  error: TError,\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = DefaultError> = (\n  failureCount: number,\n  error: TError,\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\nexport function canFetch(networkMode: NetworkMode | undefined): boolean {\n  return (networkMode ?? 'online') === 'online'\n    ? onlineManager.isOnline()\n    : true\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\nexport function createRetryer<TData = unknown, TError = DefaultError>(\n  config: RetryerConfig<TData, TError>,\n): Retryer<TData> {\n  let isRetryCancelled = false\n  let failureCount = 0\n  let isResolved = false\n  let continueFn: ((value?: unknown) => boolean) | undefined\n  let promiseResolve: (data: TData) => void\n  let promiseReject: (error: TError) => void\n\n  const promise = new Promise<TData>((outerResolve, outerReject) => {\n    promiseResolve = outerResolve\n    promiseReject = outerReject\n  })\n\n  const cancel = (cancelOptions?: CancelOptions): void => {\n    if (!isResolved) {\n      reject(new CancelledError(cancelOptions))\n\n      config.abort?.()\n    }\n  }\n  const cancelRetry = () => {\n    isRetryCancelled = true\n  }\n\n  const continueRetry = () => {\n    isRetryCancelled = false\n  }\n\n  const shouldPause = () =>\n    !focusManager.isFocused() ||\n    (config.networkMode !== 'always' && !onlineManager.isOnline())\n\n  const resolve = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onSuccess?.(value)\n      continueFn?.()\n      promiseResolve(value)\n    }\n  }\n\n  const reject = (value: any) => {\n    if (!isResolved) {\n      isResolved = true\n      config.onError?.(value)\n      continueFn?.()\n      promiseReject(value)\n    }\n  }\n\n  const pause = () => {\n    return new Promise((continueResolve) => {\n      continueFn = (value) => {\n        const canContinue = isResolved || !shouldPause()\n        if (canContinue) {\n          continueResolve(value)\n        }\n        return canContinue\n      }\n      config.onPause?.()\n    }).then(() => {\n      continueFn = undefined\n      if (!isResolved) {\n        config.onContinue?.()\n      }\n    })\n  }\n\n  // Create loop function\n  const run = () => {\n    // Do nothing if already resolved\n    if (isResolved) {\n      return\n    }\n\n    let promiseOrValue: any\n\n    // Execute query\n    try {\n      promiseOrValue = config.fn()\n    } catch (error) {\n      promiseOrValue = Promise.reject(error)\n    }\n\n    Promise.resolve(promiseOrValue)\n      .then(resolve)\n      .catch((error) => {\n        // Stop if the fetch is already resolved\n        if (isResolved) {\n          return\n        }\n\n        // Do we need to retry the request?\n        const retry = config.retry ?? (isServer ? 0 : 3)\n        const retryDelay = config.retryDelay ?? defaultRetryDelay\n        const delay =\n          typeof retryDelay === 'function'\n            ? retryDelay(failureCount, error)\n            : retryDelay\n        const shouldRetry =\n          retry === true ||\n          (typeof retry === 'number' && failureCount < retry) ||\n          (typeof retry === 'function' && retry(failureCount, error))\n\n        if (isRetryCancelled || !shouldRetry) {\n          // We are done if the query does not need to be retried\n          reject(error)\n          return\n        }\n\n        failureCount++\n\n        // Notify on fail\n        config.onFail?.(failureCount, error)\n\n        // Delay\n        sleep(delay)\n          // Pause if the document is not visible or when the device is offline\n          .then(() => {\n            if (shouldPause()) {\n              return pause()\n            }\n            return\n          })\n          .then(() => {\n            if (isRetryCancelled) {\n              reject(error)\n            } else {\n              run()\n            }\n          })\n      })\n  }\n\n  // Start loop\n  if (canFetch(config.networkMode)) {\n    run()\n  } else {\n    pause().then(run)\n  }\n\n  return {\n    promise,\n    cancel,\n    continue: () => {\n      const didContinue = continueFn?.()\n      return didContinue ? promise : Promise.resolve()\n    },\n    cancelRetry,\n    continueRetry,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}