{"ast":null,"code":"\"use client\"; // src/QueryClientProvider.tsx\n\nimport * as React from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar QueryClientContext = React.createContext(void 0);\n\nvar useQueryClient = queryClient => {\n  const client = React.useContext(QueryClientContext);\n\n  if (queryClient) {\n    return queryClient;\n  }\n\n  if (!client) {\n    throw new Error(\"No QueryClient set, use QueryClientProvider to set one\");\n  }\n\n  return client;\n};\n\nvar QueryClientProvider = _ref => {\n  let {\n    client,\n    children\n  } = _ref;\n  React.useEffect(() => {\n    client.mount();\n    return () => {\n      client.unmount();\n    };\n  }, [client]);\n  return /* @__PURE__ */jsx(QueryClientContext.Provider, {\n    value: client,\n    children\n  });\n};\n\nexport { QueryClientContext, QueryClientProvider, useQueryClient };","map":{"version":3,"mappings":";;AACA,YAAYA,KAAZ,MAAuB,OAAvB;AAuCI;AAnCG,IAAMC,qBAA2BD,oBACtC,MADsC,CAAjC;;AAIA,IAAME,iBAAkBC,WAAD,IAA+B;AAC3D,QAAMC,SAAeJ,iBAAWC,kBAAX,CAArB;;AAEA,MAAIE,WAAJ,EAAiB;AACf,WAAOA,WAAP;AACF;;AAEA,MAAI,CAACC,MAAL,EAAa;AACX,UAAM,IAAIC,KAAJ,CAAU,wDAAV,CAAN;AACF;;AAEA,SAAOD,MAAP;AACF,CAZO;;AAmBA,IAAME,sBAAsB,QAGU;AAAA,MAHT;AAClCF,UADkC;AAElCG;AAFkC,GAGS;AACrCP,kBAAU,MAAM;AACpBI,WAAOI,KAAP;AACA,WAAO,MAAM;AACXJ,aAAOK,OAAP;AACF,KAFA;AAGF,GALM,EAKH,CAACL,MAAD,CALG;AAON,SACE,mBAACH,mBAAmBS,QAApB,EAAC;AAA4BC,WAAOP,MAAnC;AACEG;AADF,GAAD,CADF;AAKF,CAhBO","names":["React","QueryClientContext","useQueryClient","queryClient","client","Error","QueryClientProvider","children","mount","unmount","Provider","value"],"sources":["C:\\Users\\Avi Sharma\\Desktop\\zerodha_proj\\client2\\node_modules\\@tanstack\\react-query\\src\\QueryClientProvider.tsx"],"sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport type { QueryClient } from '@tanstack/query-core'\n\nexport const QueryClientContext = React.createContext<QueryClient | undefined>(\n  undefined,\n)\n\nexport const useQueryClient = (queryClient?: QueryClient) => {\n  const client = React.useContext(QueryClientContext)\n\n  if (queryClient) {\n    return queryClient\n  }\n\n  if (!client) {\n    throw new Error('No QueryClient set, use QueryClientProvider to set one')\n  }\n\n  return client\n}\n\nexport type QueryClientProviderProps = {\n  client: QueryClient\n  children?: React.ReactNode\n}\n\nexport const QueryClientProvider = ({\n  client,\n  children,\n}: QueryClientProviderProps): JSX.Element => {\n  React.useEffect(() => {\n    client.mount()\n    return () => {\n      client.unmount()\n    }\n  }, [client])\n\n  return (\n    <QueryClientContext.Provider value={client}>\n      {children}\n    </QueryClientContext.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}