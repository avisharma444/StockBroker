{"ast":null,"code":"// src/notifyManager.ts\nfunction createNotifyManager() {\n  let queue = [];\n  let transactions = 0;\n\n  let notifyFn = callback => {\n    callback();\n  };\n\n  let batchNotifyFn = callback => {\n    callback();\n  };\n\n  let scheduleFn = cb => setTimeout(cb, 0);\n\n  const setScheduler = fn => {\n    scheduleFn = fn;\n  };\n\n  const batch = callback => {\n    let result;\n    transactions++;\n\n    try {\n      result = callback();\n    } finally {\n      transactions--;\n\n      if (!transactions) {\n        flush();\n      }\n    }\n\n    return result;\n  };\n\n  const schedule = callback => {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleFn(() => {\n        notifyFn(callback);\n      });\n    }\n  };\n\n  const batchCalls = callback => {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      schedule(() => {\n        callback(...args);\n      });\n    };\n  };\n\n  const flush = () => {\n    const originalQueue = queue;\n    queue = [];\n\n    if (originalQueue.length) {\n      scheduleFn(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach(callback => {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n\n  const setNotifyFunction = fn => {\n    notifyFn = fn;\n  };\n\n  const setBatchNotifyFunction = fn => {\n    batchNotifyFn = fn;\n  };\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction,\n    setScheduler\n  };\n}\n\nvar notifyManager = createNotifyManager();\nexport { createNotifyManager, notifyManager };","map":{"version":3,"mappings":";AAYO,SAASA,mBAAT,GAA+B;AACpC,MAAIC,QAA+B,EAAnC;AACA,MAAIC,eAAe,CAAnB;;AACA,MAAIC,WAA4BC,QAAD,IAAc;AAC3CA;AACF,GAFA;;AAGA,MAAIC,gBAAsCD,QAAD,IAA0B;AACjEA;AACF,GAFA;;AAGA,MAAIE,aAAgCC,EAAD,IAAQC,WAAWD,EAAX,EAAe,CAAf,CAA3C;;AAEA,QAAME,eAAgBC,EAAD,IAA0B;AAC7CJ,iBAAaI,EAAb;AACF,GAFA;;AAIA,QAAMC,QAAYP,QAAJ,IAA6B;AACzC,QAAIQ,MAAJ;AACAV;;AACA,QAAI;AACFU,eAASR,UAAT;AACF,KAFA,SAEE;AACAF;;AACA,UAAI,CAACA,YAAL,EAAmB;AACjBW;AACF;AACF;;AACA,WAAOD,MAAP;AACF,GAZA;;AAcA,QAAME,WAAYV,QAAD,IAAoC;AACnD,QAAIF,YAAJ,EAAkB;AAChBD,YAAMc,IAAN,CAAWX,QAAX;AACF,KAFA,MAEO;AACLE,iBAAW,MAAM;AACfH,iBAASC,QAAT;AACD,OAFD;AAGF;AACF,GARA;;AAaA,QAAMY,aACJZ,QADiB,IAES;AAC1B,WAAO,YAAa;AAAA,wCAATa,IAAS;AAATA,YAAS;AAAA;;AAClBH,eAAS,MAAM;AACbV,iBAAS,GAAGa,IAAZ;AACD,OAFD;AAGF,KAJA;AAKF,GARA;;AAUA,QAAMJ,QAAQ,MAAY;AACxB,UAAMK,gBAAgBjB,KAAtB;AACAA,YAAQ,EAAR;;AACA,QAAIiB,cAAcC,MAAlB,EAA0B;AACxBb,iBAAW,MAAM;AACfD,sBAAc,MAAM;AAClBa,wBAAcE,OAAd,CAAuBhB,QAAD,IAAc;AAClCD,qBAASC,QAAT;AACD,WAFD;AAGD,SAJD;AAKD,OAND;AAOF;AACF,GAZA;;AAkBA,QAAMiB,oBAAqBX,EAAD,IAAwB;AAChDP,eAAWO,EAAX;AACF,GAFA;;AAQA,QAAMY,yBAA0BZ,EAAD,IAA6B;AAC1DL,oBAAgBK,EAAhB;AACF,GAFA;;AAIA,SAAO;AACLC,SADK;AAELK,cAFK;AAGLF,YAHK;AAILO,qBAJK;AAKLC,0BALK;AAMLb;AANK,GAAP;AAQF;;AAGO,IAAMc,gBAAgBvB,qBAAtB","names":["createNotifyManager","queue","transactions","notifyFn","callback","batchNotifyFn","scheduleFn","cb","setTimeout","setScheduler","fn","batch","result","flush","schedule","push","batchCalls","args","originalQueue","length","forEach","setNotifyFunction","setBatchNotifyFunction","notifyManager"],"sources":["C:\\Users\\Avi Sharma\\Desktop\\zerodha_proj\\client2\\node_modules\\@tanstack\\query-core\\src\\notifyManager.ts"],"sourcesContent":["// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\ntype BatchCallsCallback<T extends Array<unknown>> = (...args: T) => void\n\ntype ScheduleFunction = (callback: () => void) => void\n\nexport function createNotifyManager() {\n  let queue: Array<NotifyCallback> = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = (callback) => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n  let scheduleFn: ScheduleFunction = (cb) => setTimeout(cb, 0)\n\n  const setScheduler = (fn: ScheduleFunction) => {\n    scheduleFn = fn\n  }\n\n  const batch = <T>(callback: () => T): T => {\n    let result\n    transactions++\n    try {\n      result = callback()\n    } finally {\n      transactions--\n      if (!transactions) {\n        flush()\n      }\n    }\n    return result\n  }\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleFn(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  const batchCalls = <T extends Array<unknown>>(\n    callback: BatchCallsCallback<T>,\n  ): BatchCallsCallback<T> => {\n    return (...args) => {\n      schedule(() => {\n        callback(...args)\n      })\n    }\n  }\n\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleFn(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  const setNotifyFunction = (fn: NotifyFunction) => {\n    notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  const setBatchNotifyFunction = (fn: BatchNotifyFunction) => {\n    batchNotifyFn = fn\n  }\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction,\n    setScheduler,\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n"]},"metadata":{},"sourceType":"module"}