{"ast":null,"code":"// src/mutationCache.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Mutation } from \"./mutation.js\";\nimport { matchMutation, noop } from \"./utils.js\";\nimport { Subscribable } from \"./subscribable.js\";\nvar MutationCache = class extends Subscribable {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this.config = config;\n    this.#mutations = [];\n    this.#mutationId = 0;\n  }\n\n  #mutations;\n  #mutationId;\n  #resuming;\n\n  build(client, options, state) {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.#mutationId,\n      options: client.defaultMutationOptions(options),\n      state\n    });\n    this.add(mutation);\n    return mutation;\n  }\n\n  add(mutation) {\n    this.#mutations.push(mutation);\n    this.notify({\n      type: \"added\",\n      mutation\n    });\n  }\n\n  remove(mutation) {\n    this.#mutations = this.#mutations.filter(x => x !== mutation);\n    this.notify({\n      type: \"removed\",\n      mutation\n    });\n  }\n\n  clear() {\n    notifyManager.batch(() => {\n      this.#mutations.forEach(mutation => {\n        this.remove(mutation);\n      });\n    });\n  }\n\n  getAll() {\n    return this.#mutations;\n  }\n\n  find(filters) {\n    const defaultedFilters = {\n      exact: true,\n      ...filters\n    };\n    return this.#mutations.find(mutation => matchMutation(defaultedFilters, mutation));\n  }\n\n  findAll() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.#mutations.filter(mutation => matchMutation(filters, mutation));\n  }\n\n  notify(event) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event);\n      });\n    });\n  }\n\n  resumePausedMutations() {\n    this.#resuming = (this.#resuming ?? Promise.resolve()).then(() => {\n      const pausedMutations = this.#mutations.filter(x => x.state.isPaused);\n      return notifyManager.batch(() => pausedMutations.reduce((promise, mutation) => promise.then(() => mutation.continue().catch(noop)), Promise.resolve()));\n    }).then(() => {\n      this.#resuming = void 0;\n    });\n    return this.#resuming;\n  }\n\n};\nexport { MutationCache };","map":{"version":3,"mappings":";AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,QAAT,QAAyB,eAAzB;AACA,SAASC,aAAT,EAAwBC,IAAxB,QAAoC,YAApC;AACA,SAASC,YAAT,QAA6B,mBAA7B;AAgFO,IAAMC,gBAAN,cAA4BD,YAA5B,CAAgE;AAKrEE,gBAAqD;AAAA,QAAlCC,MAAkC,uEAAJ,EAAI;AACnD;AADiB;AAEjB,SAAK,UAAL,GAAkB,EAAlB;AACA,SAAK,WAAL,GAAmB,CAAnB;AACF;;AARA;AACA;AACA;;AAQAC,QACEC,MADF,EAEEC,OAFF,EAGEC,KAHF,EAIiD;AAC/C,UAAMC,WAAW,IAAIX,QAAJ,CAAa;AAC5BY,qBAAe,IADa;AAE5BC,kBAAY,EAAE,KAAK,WAFS;AAG5BJ,eAASD,OAAOM,sBAAP,CAA8BL,OAA9B,CAHmB;AAI5BC;AAJ4B,KAAb,CAAjB;AAOA,SAAKK,GAAL,CAASJ,QAAT;AAEA,WAAOA,QAAP;AACF;;AAEAI,MAAIJ,QAAJ,EAAkD;AAChD,SAAK,UAAL,CAAgBK,IAAhB,CAAqBL,QAArB;AACA,SAAKM,MAAL,CAAY;AAAEC,YAAM,OAAR;AAAiBP;AAAjB,KAAZ;AACF;;AAEAQ,SAAOR,QAAP,EAAqD;AACnD,SAAK,UAAL,GAAkB,KAAK,UAAL,CAAgBS,MAAhB,CAAwBC,CAAD,IAAOA,MAAMV,QAApC,CAAlB;AACA,SAAKM,MAAL,CAAY;AAAEC,YAAM,SAAR;AAAmBP;AAAnB,KAAZ;AACF;;AAEAW,UAAc;AACZvB,kBAAcwB,KAAd,CAAoB,MAAM;AACxB,WAAK,UAAL,CAAgBC,OAAhB,CAAyBb,QAAD,IAAc;AACpC,aAAKQ,MAAL,CAAYR,QAAZ;AACD,OAFD;AAGD,KAJD;AAKF;;AAEAc,WAA0B;AACxB,WAAO,KAAK,UAAZ;AACF;;AAEAC,OAMEC,OANF,EAO6D;AAC3D,UAAMC,mBAAmB;AAAEC,aAAO,IAAT;AAAe,SAAGF;AAAlB,KAAzB;AAEA,WAAO,KAAK,UAAL,CAAgBD,IAAhB,CAAsBf,QAAD,IAC1BV,cAAc2B,gBAAd,EAAgCjB,QAAhC,CADK,CAAP;AAGF;;AAEAmB,YAAwD;AAAA,QAAhDH,OAAgD,uEAArB,EAAqB;AACtD,WAAO,KAAK,UAAL,CAAgBP,MAAhB,CAAwBT,QAAD,IAC5BV,cAAc0B,OAAd,EAAuBhB,QAAvB,CADK,CAAP;AAGF;;AAEAM,SAAOc,KAAP,EAAwC;AACtChC,kBAAcwB,KAAd,CAAoB,MAAM;AACxB,WAAKS,SAAL,CAAeR,OAAf,CAAwBS,QAAD,IAAc;AACnCA,iBAASF,KAAT;AACD,OAFD;AAGD,KAJD;AAKF;;AAEAG,0BAA0C;AACxC,SAAK,SAAL,GAAK,CAAa,KAAK,SAAL,IAAkBC,QAAQC,OAAR,EAA/B,EACFC,IADE,CACG,MAAM;AACV,YAAMC,kBAAkB,KAAK,UAAL,CAAgBlB,MAAhB,CAAwBC,CAAD,IAAOA,EAAEX,KAAF,CAAQ6B,QAAtC,CAAxB;AACA,aAAOxC,cAAcwB,KAAd,CAAoB,MACzBe,gBAAgBE,MAAhB,CACE,CAACC,OAAD,EAAU9B,QAAV,KACE8B,QAAQJ,IAAR,CAAa,MAAM1B,SAAS+B,QAAT,GAAoBC,KAApB,CAA0BzC,IAA1B,CAAnB,CAFJ,EAGEiC,QAAQC,OAAR,EAHF,CADK,CAAP;AAOD,KAVE,EAWFC,IAXE,CAWG,MAAM;AACV,WAAK,SAAL,GAAiB,MAAjB;AACD,KAbE,CAAL;AAeA,WAAO,KAAK,SAAZ;AACF;;AAhGqE,CAAhE","names":["notifyManager","Mutation","matchMutation","noop","Subscribable","MutationCache","constructor","config","build","client","options","state","mutation","mutationCache","mutationId","defaultMutationOptions","add","push","notify","type","remove","filter","x","clear","batch","forEach","getAll","find","filters","defaultedFilters","exact","findAll","event","listeners","listener","resumePausedMutations","Promise","resolve","then","pausedMutations","isPaused","reduce","promise","continue","catch"],"sources":["C:\\Users\\Avi Sharma\\Desktop\\zerodha_proj\\client2\\node_modules\\@tanstack\\query-core\\src\\mutationCache.ts"],"sourcesContent":["import { notifyManager } from './notifyManager'\nimport { Mutation } from './mutation'\nimport { matchMutation, noop } from './utils'\nimport { Subscribable } from './subscribable'\nimport type { MutationObserver } from './mutationObserver'\nimport type { DefaultError, MutationOptions, NotifyEvent } from './types'\nimport type { QueryClient } from './queryClient'\nimport type { Action, MutationState } from './mutation'\nimport type { MutationFilters } from './utils'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: DefaultError,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onSuccess?: (\n    data: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onMutate?: (\n    variables: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n  onSettled?: (\n    data: unknown | undefined,\n    error: DefaultError | null,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown>,\n  ) => Promise<unknown> | unknown\n}\n\ninterface NotifyEventMutationAdded extends NotifyEvent {\n  type: 'added'\n  mutation: Mutation<any, any, any, any>\n}\ninterface NotifyEventMutationRemoved extends NotifyEvent {\n  type: 'removed'\n  mutation: Mutation<any, any, any, any>\n}\n\ninterface NotifyEventMutationObserverAdded extends NotifyEvent {\n  type: 'observerAdded'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverRemoved extends NotifyEvent {\n  type: 'observerRemoved'\n  mutation: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any>\n}\n\ninterface NotifyEventMutationObserverOptionsUpdated extends NotifyEvent {\n  type: 'observerOptionsUpdated'\n  mutation?: Mutation<any, any, any, any>\n  observer: MutationObserver<any, any, any, any>\n}\n\ninterface NotifyEventMutationUpdated extends NotifyEvent {\n  type: 'updated'\n  mutation: Mutation<any, any, any, any>\n  action: Action<any, any, any, any>\n}\n\nexport type MutationCacheNotifyEvent =\n  | NotifyEventMutationAdded\n  | NotifyEventMutationRemoved\n  | NotifyEventMutationObserverAdded\n  | NotifyEventMutationObserverRemoved\n  | NotifyEventMutationObserverOptionsUpdated\n  | NotifyEventMutationUpdated\n\ntype MutationCacheListener = (event: MutationCacheNotifyEvent) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  #mutations: Array<Mutation<any, any, any, any>>\n  #mutationId: number\n  #resuming: Promise<unknown> | undefined\n\n  constructor(public config: MutationCacheConfig = {}) {\n    super()\n    this.#mutations = []\n    this.#mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>,\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.#mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.#mutations.push(mutation)\n    this.notify({ type: 'added', mutation })\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.#mutations = this.#mutations.filter((x) => x !== mutation)\n    this.notify({ type: 'removed', mutation })\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.#mutations.forEach((mutation) => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Array<Mutation> {\n    return this.#mutations\n  }\n\n  find<\n    TData = unknown,\n    TError = DefaultError,\n    TVariables = any,\n    TContext = unknown,\n  >(\n    filters: MutationFilters,\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    const defaultedFilters = { exact: true, ...filters }\n\n    return this.#mutations.find((mutation) =>\n      matchMutation(defaultedFilters, mutation),\n    )\n  }\n\n  findAll(filters: MutationFilters = {}): Array<Mutation> {\n    return this.#mutations.filter((mutation) =>\n      matchMutation(filters, mutation),\n    )\n  }\n\n  notify(event: MutationCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(event)\n      })\n    })\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    this.#resuming = (this.#resuming ?? Promise.resolve())\n      .then(() => {\n        const pausedMutations = this.#mutations.filter((x) => x.state.isPaused)\n        return notifyManager.batch(() =>\n          pausedMutations.reduce(\n            (promise, mutation) =>\n              promise.then(() => mutation.continue().catch(noop)),\n            Promise.resolve() as Promise<unknown>,\n          ),\n        )\n      })\n      .then(() => {\n        this.#resuming = undefined\n      })\n\n    return this.#resuming\n  }\n}\n"]},"metadata":{},"sourceType":"module"}