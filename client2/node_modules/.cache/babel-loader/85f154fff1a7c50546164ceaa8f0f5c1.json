{"ast":null,"code":"// src/queryClient.ts\nimport { functionalUpdate, hashKey, hashQueryKeyByOptions, noop, partialMatchKey, skipToken } from \"./utils.js\";\nimport { QueryCache } from \"./queryCache.js\";\nimport { MutationCache } from \"./mutationCache.js\";\nimport { focusManager } from \"./focusManager.js\";\nimport { onlineManager } from \"./onlineManager.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { infiniteQueryBehavior } from \"./infiniteQueryBehavior.js\";\nvar QueryClient = class {\n  #queryCache;\n  #mutationCache;\n  #defaultOptions;\n  #queryDefaults;\n  #mutationDefaults;\n  #mountCount;\n  #unsubscribeFocus;\n  #unsubscribeOnline;\n\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.#queryCache = config.queryCache || new QueryCache();\n    this.#mutationCache = config.mutationCache || new MutationCache();\n    this.#defaultOptions = config.defaultOptions || {};\n    this.#queryDefaults = /* @__PURE__ */new Map();\n    this.#mutationDefaults = /* @__PURE__ */new Map();\n    this.#mountCount = 0;\n  }\n\n  mount() {\n    this.#mountCount++;\n    if (this.#mountCount !== 1) return;\n    this.#unsubscribeFocus = focusManager.subscribe(async focused => {\n      if (focused) {\n        await this.resumePausedMutations();\n        this.#queryCache.onFocus();\n      }\n    });\n    this.#unsubscribeOnline = onlineManager.subscribe(async online => {\n      if (online) {\n        await this.resumePausedMutations();\n        this.#queryCache.onOnline();\n      }\n    });\n  }\n\n  unmount() {\n    this.#mountCount--;\n    if (this.#mountCount !== 0) return;\n    this.#unsubscribeFocus?.();\n    this.#unsubscribeFocus = void 0;\n    this.#unsubscribeOnline?.();\n    this.#unsubscribeOnline = void 0;\n  }\n\n  isFetching(filters) {\n    return this.#queryCache.findAll({ ...filters,\n      fetchStatus: \"fetching\"\n    }).length;\n  }\n\n  isMutating(filters) {\n    return this.#mutationCache.findAll({ ...filters,\n      status: \"pending\"\n    }).length;\n  }\n\n  getQueryData(queryKey) {\n    const options = this.defaultQueryOptions({\n      queryKey\n    });\n    return this.#queryCache.get(options.queryHash)?.state.data;\n  }\n\n  ensureQueryData(options) {\n    const cachedData = this.getQueryData(options.queryKey);\n    if (cachedData === void 0) return this.fetchQuery(options);else {\n      const defaultedOptions = this.defaultQueryOptions(options);\n      const query = this.#queryCache.build(this, defaultedOptions);\n\n      if (options.revalidateIfStale && query.isStaleByTime(defaultedOptions.staleTime)) {\n        void this.prefetchQuery(defaultedOptions);\n      }\n\n      return Promise.resolve(cachedData);\n    }\n  }\n\n  getQueriesData(filters) {\n    return this.#queryCache.findAll(filters).map(_ref => {\n      let {\n        queryKey,\n        state\n      } = _ref;\n      const data = state.data;\n      return [queryKey, data];\n    });\n  }\n\n  setQueryData(queryKey, updater, options) {\n    const defaultedOptions = this.defaultQueryOptions({\n      queryKey\n    });\n    const query = this.#queryCache.get(defaultedOptions.queryHash);\n    const prevData = query?.state.data;\n    const data = functionalUpdate(updater, prevData);\n\n    if (data === void 0) {\n      return void 0;\n    }\n\n    return this.#queryCache.build(this, defaultedOptions).setData(data, { ...options,\n      manual: true\n    });\n  }\n\n  setQueriesData(filters, updater, options) {\n    return notifyManager.batch(() => this.#queryCache.findAll(filters).map(_ref2 => {\n      let {\n        queryKey\n      } = _ref2;\n      return [queryKey, this.setQueryData(queryKey, updater, options)];\n    }));\n  }\n\n  getQueryState(queryKey) {\n    const options = this.defaultQueryOptions({\n      queryKey\n    });\n    return this.#queryCache.get(options.queryHash)?.state;\n  }\n\n  removeQueries(filters) {\n    const queryCache = this.#queryCache;\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query);\n      });\n    });\n  }\n\n  resetQueries(filters, options) {\n    const queryCache = this.#queryCache;\n    const refetchFilters = {\n      type: \"active\",\n      ...filters\n    };\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset();\n      });\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  cancelQueries() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let cancelOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const defaultedCancelOptions = {\n      revert: true,\n      ...cancelOptions\n    };\n    const promises = notifyManager.batch(() => this.#queryCache.findAll(filters).map(query => query.cancel(defaultedCancelOptions)));\n    return Promise.all(promises).then(noop).catch(noop);\n  }\n\n  invalidateQueries() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return notifyManager.batch(() => {\n      this.#queryCache.findAll(filters).forEach(query => {\n        query.invalidate();\n      });\n\n      if (filters.refetchType === \"none\") {\n        return Promise.resolve();\n      }\n\n      const refetchFilters = { ...filters,\n        type: filters.refetchType ?? filters.type ?? \"active\"\n      };\n      return this.refetchQueries(refetchFilters, options);\n    });\n  }\n\n  refetchQueries() {\n    let filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    const fetchOptions = { ...options,\n      cancelRefetch: options?.cancelRefetch ?? true\n    };\n    const promises = notifyManager.batch(() => this.#queryCache.findAll(filters).filter(query => !query.isDisabled()).map(query => {\n      let promise = query.fetch(void 0, fetchOptions);\n\n      if (!fetchOptions.throwOnError) {\n        promise = promise.catch(noop);\n      }\n\n      return query.state.fetchStatus === \"paused\" ? Promise.resolve() : promise;\n    }));\n    return Promise.all(promises).then(noop);\n  }\n\n  fetchQuery(options) {\n    const defaultedOptions = this.defaultQueryOptions(options);\n\n    if (defaultedOptions.retry === void 0) {\n      defaultedOptions.retry = false;\n    }\n\n    const query = this.#queryCache.build(this, defaultedOptions);\n    return query.isStaleByTime(defaultedOptions.staleTime) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n  }\n\n  prefetchQuery(options) {\n    return this.fetchQuery(options).then(noop).catch(noop);\n  }\n\n  fetchInfiniteQuery(options) {\n    options.behavior = infiniteQueryBehavior(options.pages);\n    return this.fetchQuery(options);\n  }\n\n  prefetchInfiniteQuery(options) {\n    return this.fetchInfiniteQuery(options).then(noop).catch(noop);\n  }\n\n  resumePausedMutations() {\n    if (onlineManager.isOnline()) {\n      return this.#mutationCache.resumePausedMutations();\n    }\n\n    return Promise.resolve();\n  }\n\n  getQueryCache() {\n    return this.#queryCache;\n  }\n\n  getMutationCache() {\n    return this.#mutationCache;\n  }\n\n  getDefaultOptions() {\n    return this.#defaultOptions;\n  }\n\n  setDefaultOptions(options) {\n    this.#defaultOptions = options;\n  }\n\n  setQueryDefaults(queryKey, options) {\n    this.#queryDefaults.set(hashKey(queryKey), {\n      queryKey,\n      defaultOptions: options\n    });\n  }\n\n  getQueryDefaults(queryKey) {\n    const defaults = [...this.#queryDefaults.values()];\n    let result = {};\n    defaults.forEach(queryDefault => {\n      if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n        result = { ...result,\n          ...queryDefault.defaultOptions\n        };\n      }\n    });\n    return result;\n  }\n\n  setMutationDefaults(mutationKey, options) {\n    this.#mutationDefaults.set(hashKey(mutationKey), {\n      mutationKey,\n      defaultOptions: options\n    });\n  }\n\n  getMutationDefaults(mutationKey) {\n    const defaults = [...this.#mutationDefaults.values()];\n    let result = {};\n    defaults.forEach(queryDefault => {\n      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n        result = { ...result,\n          ...queryDefault.defaultOptions\n        };\n      }\n    });\n    return result;\n  }\n\n  defaultQueryOptions(options) {\n    if (options._defaulted) {\n      return options;\n    }\n\n    const defaultedOptions = { ...this.#defaultOptions.queries,\n      ...this.getQueryDefaults(options.queryKey),\n      ...options,\n      _defaulted: true\n    };\n\n    if (!defaultedOptions.queryHash) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\n    }\n\n    if (defaultedOptions.refetchOnReconnect === void 0) {\n      defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== \"always\";\n    }\n\n    if (defaultedOptions.throwOnError === void 0) {\n      defaultedOptions.throwOnError = !!defaultedOptions.suspense;\n    }\n\n    if (!defaultedOptions.networkMode && defaultedOptions.persister) {\n      defaultedOptions.networkMode = \"offlineFirst\";\n    }\n\n    if (defaultedOptions.enabled !== true && defaultedOptions.queryFn === skipToken) {\n      defaultedOptions.enabled = false;\n    }\n\n    return defaultedOptions;\n  }\n\n  defaultMutationOptions(options) {\n    if (options?._defaulted) {\n      return options;\n    }\n\n    return { ...this.#defaultOptions.mutations,\n      ...(options?.mutationKey && this.getMutationDefaults(options.mutationKey)),\n      ...options,\n      _defaulted: true\n    };\n  }\n\n  clear() {\n    this.#queryCache.clear();\n    this.#mutationCache.clear();\n  }\n\n};\nexport { QueryClient };","map":{"version":3,"mappings":"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","names":["functionalUpdate","hashKey","hashQueryKeyByOptions","noop","partialMatchKey","skipToken","QueryCache","MutationCache","focusManager","onlineManager","notifyManager","infiniteQueryBehavior","QueryClient","constructor","config","queryCache","mutationCache","defaultOptions","Map","mount","subscribe","focused","resumePausedMutations","onFocus","online","onOnline","unmount","isFetching","filters","findAll","fetchStatus","length","isMutating","status","getQueryData","queryKey","options","defaultQueryOptions","get","queryHash","state","data","ensureQueryData","cachedData","fetchQuery","defaultedOptions","query","build","revalidateIfStale","isStaleByTime","staleTime","prefetchQuery","Promise","resolve","getQueriesData","map","setQueryData","updater","prevData","setData","manual","setQueriesData","batch","getQueryState","removeQueries","forEach","remove","resetQueries","refetchFilters","type","reset","refetchQueries","cancelQueries","cancelOptions","defaultedCancelOptions","revert","promises","cancel","all","then","catch","invalidateQueries","invalidate","refetchType","fetchOptions","cancelRefetch","filter","isDisabled","promise","fetch","throwOnError","retry","fetchInfiniteQuery","behavior","pages","prefetchInfiniteQuery","isOnline","getQueryCache","getMutationCache","getDefaultOptions","setDefaultOptions","setQueryDefaults","set","getQueryDefaults","defaults","values","result","queryDefault","setMutationDefaults","mutationKey","getMutationDefaults","_defaulted","queries","refetchOnReconnect","networkMode","suspense","persister","enabled","queryFn","defaultMutationOptions","mutations","clear"],"sources":["C:\\Users\\Avi Sharma\\Desktop\\zerodha_proj\\client2\\node_modules\\@tanstack\\query-core\\src\\queryClient.ts"],"sourcesContent":["import {\n  functionalUpdate,\n  hashKey,\n  hashQueryKeyByOptions,\n  noop,\n  partialMatchKey,\n  skipToken,\n} from './utils'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport type { DataTag, NoInfer, OmitKeyof } from './types'\nimport type { QueryState } from './query'\nimport type {\n  CancelOptions,\n  DefaultError,\n  DefaultOptions,\n  DefaultedQueryObserverOptions,\n  EnsureQueryDataOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryClientConfig,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  SetDataOptions,\n} from './types'\nimport type { MutationFilters, QueryFilters, Updater } from './utils'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: OmitKeyof<QueryOptions<any, any, any>, 'queryKey'>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  #queryCache: QueryCache\n  #mutationCache: MutationCache\n  #defaultOptions: DefaultOptions\n  #queryDefaults: Map<string, QueryDefaults>\n  #mutationDefaults: Map<string, MutationDefaults>\n  #mountCount: number\n  #unsubscribeFocus?: () => void\n  #unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.#queryCache = config.queryCache || new QueryCache()\n    this.#mutationCache = config.mutationCache || new MutationCache()\n    this.#defaultOptions = config.defaultOptions || {}\n    this.#queryDefaults = new Map()\n    this.#mutationDefaults = new Map()\n    this.#mountCount = 0\n  }\n\n  mount(): void {\n    this.#mountCount++\n    if (this.#mountCount !== 1) return\n\n    this.#unsubscribeFocus = focusManager.subscribe(async (focused) => {\n      if (focused) {\n        await this.resumePausedMutations()\n        this.#queryCache.onFocus()\n      }\n    })\n    this.#unsubscribeOnline = onlineManager.subscribe(async (online) => {\n      if (online) {\n        await this.resumePausedMutations()\n        this.#queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.#mountCount--\n    if (this.#mountCount !== 0) return\n\n    this.#unsubscribeFocus?.()\n    this.#unsubscribeFocus = undefined\n\n    this.#unsubscribeOnline?.()\n    this.#unsubscribeOnline = undefined\n  }\n\n  isFetching(filters?: QueryFilters): number {\n    return this.#queryCache.findAll({ ...filters, fetchStatus: 'fetching' })\n      .length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.#mutationCache.findAll({ ...filters, status: 'pending' }).length\n  }\n\n  getQueryData<\n    TQueryFnData = unknown,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TTaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue\n    >\n      ? TaggedValue\n      : TQueryFnData,\n  >(queryKey: TTaggedQueryKey): TInferredQueryFnData | undefined\n  getQueryData(queryKey: QueryKey) {\n    const options = this.defaultQueryOptions({ queryKey })\n    return this.#queryCache.get(options.queryHash)?.state.data\n  }\n\n  ensureQueryData<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: EnsureQueryDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const cachedData = this.getQueryData<TData>(options.queryKey)\n\n    if (cachedData === undefined) return this.fetchQuery(options)\n    else {\n      const defaultedOptions = this.defaultQueryOptions(options)\n      const query = this.#queryCache.build(this, defaultedOptions)\n\n      if (\n        options.revalidateIfStale &&\n        query.isStaleByTime(defaultedOptions.staleTime)\n      ) {\n        void this.prefetchQuery(defaultedOptions)\n      }\n\n      return Promise.resolve(cachedData)\n    }\n  }\n\n  getQueriesData<TQueryFnData = unknown>(\n    filters: QueryFilters,\n  ): Array<[QueryKey, TQueryFnData | undefined]> {\n    return this.#queryCache.findAll(filters).map(({ queryKey, state }) => {\n      const data = state.data as TQueryFnData | undefined\n      return [queryKey, data]\n    })\n  }\n\n  setQueryData<\n    TQueryFnData = unknown,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TTaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue\n    >\n      ? TaggedValue\n      : TQueryFnData,\n  >(\n    queryKey: TTaggedQueryKey,\n    updater: Updater<\n      NoInfer<TInferredQueryFnData> | undefined,\n      NoInfer<TInferredQueryFnData> | undefined\n    >,\n    options?: SetDataOptions,\n  ): TInferredQueryFnData | undefined {\n    const defaultedOptions = this.defaultQueryOptions<\n      any,\n      any,\n      unknown,\n      any,\n      QueryKey\n    >({ queryKey })\n\n    const query = this.#queryCache.get<TInferredQueryFnData>(\n      defaultedOptions.queryHash,\n    )\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (data === undefined) {\n      return undefined\n    }\n\n    return this.#queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, manual: true })\n  }\n\n  setQueriesData<TQueryFnData>(\n    filters: QueryFilters,\n    updater: Updater<TQueryFnData | undefined, TQueryFnData | undefined>,\n    options?: SetDataOptions,\n  ): Array<[QueryKey, TQueryFnData | undefined]> {\n    return notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TQueryFnData>(queryKey, updater, options),\n        ]),\n    )\n  }\n\n  getQueryState<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = TTaggedQueryKey extends DataTag<\n      unknown,\n      infer TaggedValue\n    >\n      ? TaggedValue\n      : TQueryFnData,\n  >(\n    queryKey: TTaggedQueryKey,\n  ): QueryState<TInferredQueryFnData, TError> | undefined {\n    const options = this.defaultQueryOptions({ queryKey })\n    return this.#queryCache.get<TInferredQueryFnData, TError>(options.queryHash)\n      ?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void {\n    const queryCache = this.#queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries(filters?: QueryFilters, options?: ResetOptions): Promise<void> {\n    const queryCache = this.#queryCache\n\n    const refetchFilters: RefetchQueryFilters = {\n      type: 'active',\n      ...filters,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(\n    filters: QueryFilters = {},\n    cancelOptions: CancelOptions = {},\n  ): Promise<void> {\n    const defaultedCancelOptions = { revert: true, ...cancelOptions }\n\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .map((query) => query.cancel(defaultedCancelOptions)),\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries(\n    filters: InvalidateQueryFilters = {},\n    options: InvalidateOptions = {},\n  ): Promise<void> {\n    return notifyManager.batch(() => {\n      this.#queryCache.findAll(filters).forEach((query) => {\n        query.invalidate()\n      })\n\n      if (filters.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      const refetchFilters: RefetchQueryFilters = {\n        ...filters,\n        type: filters.refetchType ?? filters.type ?? 'active',\n      }\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries(\n    filters: RefetchQueryFilters = {},\n    options?: RefetchOptions,\n  ): Promise<void> {\n    const fetchOptions = {\n      ...options,\n      cancelRefetch: options?.cancelRefetch ?? true,\n    }\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .filter((query) => !query.isDisabled())\n        .map((query) => {\n          let promise = query.fetch(undefined, fetchOptions)\n          if (!fetchOptions.throwOnError) {\n            promise = promise.catch(noop)\n          }\n          return query.state.fetchStatus === 'paused'\n            ? Promise.resolve()\n            : promise\n        }),\n    )\n\n    return Promise.all(promises).then(noop)\n  }\n\n  fetchQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options: FetchQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<TData> {\n    const defaultedOptions = this.defaultQueryOptions(options)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (defaultedOptions.retry === undefined) {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.#queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchQuery(options).then(noop).catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<InfiniteData<TData, TPageParam>> {\n    options.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData,\n      TPageParam\n    >(options.pages)\n    return this.fetchQuery(options)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(options).then(noop).catch(noop)\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    if (onlineManager.isOnline()) {\n      return this.#mutationCache.resumePausedMutations()\n    }\n    return Promise.resolve()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.#queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.#mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.#defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.#defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: Partial<\n      OmitKeyof<QueryObserverOptions<unknown, any, any, any>, 'queryKey'>\n    >,\n  ): void {\n    this.#queryDefaults.set(hashKey(queryKey), {\n      queryKey,\n      defaultOptions: options,\n    })\n  }\n\n  getQueryDefaults(\n    queryKey: QueryKey,\n  ): OmitKeyof<QueryObserverOptions<any, any, any, any, any>, 'queryKey'> {\n    const defaults = [...this.#queryDefaults.values()]\n\n    let result: OmitKeyof<\n      QueryObserverOptions<any, any, any, any, any>,\n      'queryKey'\n    > = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n        result = { ...result, ...queryDefault.defaultOptions }\n      }\n    })\n    return result\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: OmitKeyof<\n      MutationObserverOptions<any, any, any, any>,\n      'mutationKey'\n    >,\n  ): void {\n    this.#mutationDefaults.set(hashKey(mutationKey), {\n      mutationKey,\n      defaultOptions: options,\n    })\n  }\n\n  getMutationDefaults(\n    mutationKey: MutationKey,\n  ): MutationObserverOptions<any, any, any, any> {\n    const defaults = [...this.#mutationDefaults.values()]\n\n    let result: MutationObserverOptions<any, any, any, any> = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n        result = { ...result, ...queryDefault.defaultOptions }\n      }\n    })\n\n    return result\n  }\n\n  defaultQueryOptions<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options:\n      | QueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey,\n          TPageParam\n        >\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >,\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.#defaultOptions.queries,\n      ...this.getQueryDefaults(options.queryKey),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions,\n      )\n    }\n\n    // dependent default values\n    if (defaultedOptions.refetchOnReconnect === undefined) {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (defaultedOptions.throwOnError === undefined) {\n      defaultedOptions.throwOnError = !!defaultedOptions.suspense\n    }\n\n    if (!defaultedOptions.networkMode && defaultedOptions.persister) {\n      defaultedOptions.networkMode = 'offlineFirst'\n    }\n\n    if (\n      defaultedOptions.enabled !== true &&\n      defaultedOptions.queryFn === skipToken\n    ) {\n      defaultedOptions.enabled = false\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T,\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.#defaultOptions.mutations,\n      ...(options?.mutationKey &&\n        this.getMutationDefaults(options.mutationKey)),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.#queryCache.clear()\n    this.#mutationCache.clear()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}